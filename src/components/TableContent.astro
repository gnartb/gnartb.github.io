---
interface MenuItem {
  id: string;
  name: string;
  children?: MenuItem[]; // Optional children for nested menus
}

export interface Props {
  items: MenuItem[];
}

const { items } = Astro.props;
---

<aside class="w-80 hidden lg:block items-center top-16 left px-6 text-subtlest text-zinc-400 sticky h-0 left-full pl-16 translate-x-full overflow-visible">
  <nav>
    <ul class="space-y-4">
      {items.map((item) => (
        <li data-id={item.id} class="menu-item space-y-1">
          <a href={`#${item.id}`} class="hover:underline">
            {item.name}
          </a>
          {item.children && (
            <ul class="pl-4 space-y-1">
              {item.children.map((child) => (
                <li data-id={child.id} class="menu-item">
                  <a href={`#${child.id}`} class="hover:underline">
                    {child.name}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ul>
  </nav>
</aside>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const menuItems = document.querySelectorAll(".menu-item");
    const sections = Array.from(document.querySelectorAll("[id]")) as HTMLElement[]; // Select all elements with an ID
    console.log(menuItems);
    console.log(sections);

    function onScroll() {
      const scrollPosition = window.scrollY;

      sections.forEach((section) => {
        const sectionTop = section.offsetTop - (window.innerHeight / 6) - 70; // Adjust for fixed header offset
        const sectionHeight = section.offsetHeight;

        menuItems.forEach((menuItem) => {
          const id = menuItem.getAttribute("data-id");
          if (id === section.id) {
            if (
              scrollPosition >= sectionTop &&
              scrollPosition < sectionTop + sectionHeight
            ) {
              menuItem.classList.add("active");
            } else {
              menuItem.classList.remove("active");
            }
          }
        });
      });
    }

    window.addEventListener("scroll", onScroll);
  });
</script>

<style>
  .menu-item.active > a {
    /* color: var(--active-color, blue); Adjust to match your theme */
    @apply text-slate-950 bg-lime-300
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const anchorLinks = document.querySelectorAll('a[href*="#"]');

    anchorLinks.forEach(anchor => {
      anchor.addEventListener('click', function(event) {
        event.preventDefault(); // Prevent default anchor behavior

        const targetId = this.getAttribute('href').substr(1); // Get the ID from href
        const targetElement = document.getElementById(targetId);

        if (targetElement) {
          const targetOffset = targetElement.offsetTop; // Get the offset of the target element

          // Scroll to the target element, adjusted to center it in the viewport
          window.scrollTo({
            top: targetOffset - (window.innerHeight / 6), // Adjust to keep target in the middle
            behavior: 'smooth' // Optional: keeps the smooth scroll effect
          });
        }
      });
    });
  });
</script>
