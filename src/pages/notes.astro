---
// Component Imports
import BaseLayout from "../layouts/BaseLayout.astro";
import NoteList from "../components/NoteList.astro";

interface AllNotes {
    frontmatter: {
        noteTitle?: string;
        noteDescription?: string;
        noteDate: string;
        noteUrl?: string;
    };
    compiledContent: () => string;
}

// Function to Get all posts under folder content/til and sort by the date
async function getAllNotes(): Promise<[string, AllNotes[]][]> {
    const notePost = Object.values(
        await import.meta.glob("../content/notes/*.md", { eager: true }),
    ) as AllNotes[];

    const monthOrder = [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec",
    ];

    const sortedNotes = notePost.sort((a, b) => {
        const publishDateA = a.frontmatter.noteDate;
        const publishDateB = b.frontmatter.noteDate;

        const [dayA, monthA, yearA] = publishDateA.replace(",", "").split(" ");
        const [dayB, monthB, yearB] = publishDateB.replace(",", "").split(" ");

        if (yearA !== yearB) return parseInt(yearB) - parseInt(yearA);
        const monthDiff = monthOrder.indexOf(monthB) - monthOrder.indexOf(monthA);
        if (monthDiff !== 0) return monthDiff;
        return parseInt(dayB) - parseInt(dayA);
    });

    const groupedNotes: Record<string, AllNotes[]> = {};
    sortedNotes.forEach((note) => {
        const year = note.frontmatter.noteDate.split(", ")[1];
        if (!groupedNotes[year]) groupedNotes[year] = [];
        groupedNotes[year].push(note);
    });

    // Convert object to array and sort it by year in descending order
    return Object.entries(groupedNotes).sort(
        ([yearA], [yearB]) => parseInt(yearB) - parseInt(yearA),
    );
}

const showSortedNotes = await getAllNotes();
---

<BaseLayout
    pageName="Notes - Trang Bui"
    canonicalLink="https://trangbui.me/portfolio/"
    backTo="Index"
    showBackButton={true}
    pageTitle="Notes"
    pageIntro="Random things"
>
    {
        showSortedNotes.map(([year, posts]) => (
            <div class="relative flex flex-row gap-8 flex-wrap">
                <div class="md:absolute md:-left-20">{year}</div>
                <div class="flex flex-col gap-6">
                    {posts.map((post) => (
                        <NoteList
                            noteTitle={post.frontmatter.noteTitle}
                            noteDescription={post.frontmatter.noteDescription}
                            noteUrl={post.frontmatter.noteUrl}
                            noteDate={post.frontmatter.noteDate.split(", ")[0]}
                        />
                    ))}
                </div>
            </div>
        ))
    }
</BaseLayout>
